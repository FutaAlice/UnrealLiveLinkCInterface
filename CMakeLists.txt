cmake_minimum_required(VERSION 3.13)

project(UnrealLiveLinkCInterface VERSION 1.5.0 DESCRIPTION "Unreal Live Link C Interface")

IF(UNIX)
    IF(NOT CMAKE_BUILD_TYPE)
        SET(CMAKE_BUILD_TYPE Release)
    ENDIF()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    SET(CMAKE_CXX_FLAGS_DEBUG "-g")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
ELSE()
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
    ADD_DEFINITIONS(-D_WINSOCK_DEPRECATED_NO_WARNINGS)
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
    # SET(CMAKE_CXX_FLAGS_DEBUG "/MTd")
    # SET(CMAKE_CXX_FLAGS_RELEASE "/MT")
    # for multi-config builds (e.g. msvc)
    foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
        string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_SOURCE_DIR}/bin)
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_SOURCE_DIR}/lib)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_SOURCE_DIR}/lib)
    endforeach(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)
ENDIF()

ADD_SUBDIRECTORY(example)

# target_include_directories(${PROJECT_NAME} 
#     PUBLIC
#         ${PROJECT_SOURCE_DIR}/include
# )

# install(TARGETS ${PROJECT_NAME}
#     LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
#     PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_PREFIX}/include
# )

